// Code Generated by Sidekick is for learning and experimentation purposes only.
"use client";

import { useEffect, useState } from "react";
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/ui/tabs";
import OnRampTransactionCard from "@/app/components/OnRampTransactionCard";
import P2PTransfersList from "@/app/components/P2PTransfersList";
import type { P2PTx } from "@/app/components/P2PTransfersList";

type ORTx = {
  amount: string;
  provider: string;
  status: string;
  token: string;
  startTime: string;
};

// Define the raw API response type for OnRamp transactions
interface RawORTx {
  amount: string | number;
  provider: string;
  status: string;
  token: string;
  startTime: string | number | Date;
}

// Define the raw API response type for P2P transactions
interface RawP2PTx {
  id: string;
  amount: string | number;
  timestamp: string | number | Date;
  fromUserId: string;
  toUserId: string;
  fromName?: string;
  toName?: string;
}

export default function TransactionsPage() {
  const [onramp, setOnramp] = useState<ORTx[]>([]);
  const [p2p, setP2p] = useState<P2PTx[]>([]);

  useEffect(() => {
    (async () => {
      try {
        const r1 = await fetch("/api/user/get-transactions", { credentials: "include" });
        const d1 = await r1.json();
        if (r1.ok && Array.isArray(d1.transactions)) {
          const txs: ORTx[] = d1.transactions.map((t: RawORTx) => ({
            amount: String(t.amount),
            provider: t.provider,
            status: t.status,
            token: t.token,
            startTime: typeof t.startTime === "string" ? t.startTime : new Date(t.startTime).toISOString(),
          }));
          setOnramp(txs);
        }
      } catch {}

      try {
        const r2 = await fetch("/api/user/get-p2p-transactions", { credentials: "include" });
        const d2 = await r2.json();
        if (r2.ok && Array.isArray(d2.transactions)) {
          const txs: P2PTx[] = d2.transactions.map((t: RawP2PTx) => ({
            id: t.id,
            amount: Number(t.amount),
            timestamp: typeof t.timestamp === "string" ? t.timestamp : new Date(t.timestamp).toISOString(),
            fromUserId: t.fromUserId,
            toUserId: t.toUserId,
            fromName: t.fromName ?? undefined,
            toName: t.toName ?? undefined,
          }));
          setP2p(txs);
        }
      } catch {}
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <div className="space-y-8">
      <section className="text-center space-y-2">
        <h1 className="text-4xl font-light">
          Your <span className="text-emerald-400">Transactions</span>
        </h1>
        <p className="text-zinc-400">Browse on-ramp and P2P history.</p>
      </section>

      <Tabs defaultValue="onramp" className="w-full">
        <TabsList className="grid w-full grid-cols-2">
          <TabsTrigger value="onramp">On-Ramp</TabsTrigger>
          <TabsTrigger value="p2p">P2P</TabsTrigger>
        </TabsList>

        <TabsContent value="onramp" className="mt-6">
          <OnRampTransactionCard transactions={onramp} />
        </TabsContent>

        <TabsContent value="p2p" className="mt-6">
          <P2PTransfersList transactions={p2p} />
        </TabsContent>
      </Tabs>
    </div>
  );
}