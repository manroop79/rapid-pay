// Code Generated by Sidekick is for learning and experimentation purposes only.
"use client";

import { useEffect, useState } from "react";
import { motion } from "framer-motion";
import { SendMoneyCard } from "@/app/components/SendMoneyCard";
import BalanceCard from "@/app/components/BalanceCard";
import P2PTransfersList, { P2PTx } from "../../components/P2PTransfersList";

// Define the API response type for transactions
interface RawP2PTx {
  id: string;
  amount: number | string;
  timestamp: string | number | Date;
  fromUserId: string;
  toUserId: string;
  fromName?: string;
  toName?: string;
}

export default function P2PTransfersPage() {
  const [unlocked, setUnlocked] = useState<number | null>(null);
  const [locked, setLocked] = useState<number | null>(null);
  const [txs, setTxs] = useState<P2PTx[]>([]);

  useEffect(() => {
    (async () => {
      try {
        const b = await fetch("/api/user/get-balance", { credentials: "include" });
        const bd = await b.json();
        if (b.ok) {
          setUnlocked(bd.unlockedBalance ?? 0);
          setLocked(bd.lockedBalance ?? 0);
        }
      } catch {}
      refreshTxs();
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  const refreshTxs = async () => {
    try {
      const r = await fetch("/api/user/get-p2p-transactions", { credentials: "include" });
      const d = await r.json();
      if (r.ok && Array.isArray(d.transactions)) {
        const mapped: P2PTx[] = d.transactions.map((t: RawP2PTx) => ({
          id: t.id,
          amount: Number(t.amount),
          timestamp: typeof t.timestamp === "string" ? t.timestamp : new Date(t.timestamp).toISOString(),
          fromUserId: t.fromUserId,
          toUserId: t.toUserId,
          fromName: t.fromName ?? undefined,
          toName: t.toName ?? undefined,
        }));
        setTxs(mapped);
      }
    } catch {}
  };

  return (
    <div className="space-y-10">
      <section className="text-center space-y-2">
        <h1 className="text-4xl font-light">
          Send <span className="text-emerald-400">Money</span>
        </h1>
        <p className="text-zinc-400">Instant P2P transfers with clear confirmations.</p>
      </section>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <motion.div initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }}>
          <SendMoneyCard />
        </motion.div>

        <motion.div initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }}>
          {unlocked === null || locked === null ? (
            <div className="h-[220px] rounded-xl bg-zinc-900/40 border border-zinc-800" />
          ) : (
            <BalanceCard unlockedBalance={unlocked} lockedBalance={locked} />
          )}
        </motion.div>
      </div>

      <motion.section initial={{ opacity: 0, y: 8 }} animate={{ opacity: 1, y: 0 }}>
        <P2PTransfersList transactions={txs} />
      </motion.section>
    </div>
  );
}